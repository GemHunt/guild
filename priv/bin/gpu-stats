#!/usr/bin/env python

# Copyright 2016 TensorHub, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import division

import csv
import json
import os
import subprocess
import sys

import distutils.spawn
SMI_PATH = distutils.spawn.find_executable("nvidia-smi")
if not SMI_PATH:
    sys.stderr.write(
        "WARNING: nvidia-smi not installed, cannot collect GPU stats "
        "(see https://developer.nvidia.com/cuda-downloads)\n")
    sys.exit(127)

STATS = [
    "index",
    "fan.speed",
    "pstate",
    "memory.total",
    "memory.used",
    "utilization.gpu",
    "utilization.memory",
    "temperature.gpu",
    "power.draw"
]

###################################################################
# Init
###################################################################

def init():
    if not os.path.exists(SMI_PATH):
        sys.exit(0)
    init_gpu_stats_cmd()

def init_gpu_stats_cmd():
    global GPU_STATS_CMD
    stats_list = ",".join(STATS)
    GPU_STATS_CMD = [
        SMI_PATH,
        "--query-gpu=" + stats_list,
        "--format=csv,noheader"
    ]

###################################################################
# GPU stats
###################################################################

def print_gpu_stats():
    print_kv(gpu_stats())

def gpu_stats():
    stats = {}
    for raw in read_raw_gpu_stats():
        stats.update(calc_gpu_stats(raw))
    return stats

def read_raw_gpu_stats():
    p = subprocess.Popen(GPU_STATS_CMD, stdout=subprocess.PIPE)
    raw = list(csv.reader(p.stdout))
    result = p.wait()
    if result != 0:
        read_gpu_stats_error(raw)
    return raw

def read_gpu_stats_error(raw):
    sys.stderr.write("WARNING: cannot read GPU stats, ")
    for l1 in raw:
        for l2 in l1:
            sys.stderr.write(l2)
    sys.stderr.write("\n")
    sys.stderr.flush()
    sys.exit(0)

def calc_gpu_stats(raw):
    # See STATS for list of stat names/indexes
    index = raw[0]
    mem_total = parse_raw(raw[3], parse_bytes)
    mem_used = parse_raw(raw[4], parse_bytes)
    vals = [
        ("fanspeed", parse_raw(raw[1], parse_percent)),
        ("pstate", parse_raw(raw[2], parse_pstate)),
        ("mem/total", mem_total),
        ("mem/used", mem_used),
        ("mem/free", mem_total - mem_used),
        ("mem/util", parse_raw(raw[6], parse_percent)),
        ("gpu/util", parse_raw(raw[5], parse_percent)),
        ("temp", parse_raw(raw[7], parse_int)),
        ("powerdraw", parse_raw(raw[8], parse_watts))
    ]
    return dict([(gpu_val_key(index, name), val) for name, val in vals])

def parse_raw(raw, parser):
    stripped = raw.strip()
    if stripped == "[Not Supported]":
        return None
    else:
        return parser(stripped)

def parse_pstate(val):
    if not val.startswith("P"):
        raise AssertionError(val)
    return int(val[1:])

def parse_int(val):
    return int(val)

def parse_percent(val):
    if not val.endswith(" %"):
        raise AssertionError(val)
    return float(val[0:-2]) / 100

def parse_bytes(val):
    if not val.endswith(" MiB"):
        raise AssertionError(val)
    return int(val[0:-4]) * 1024 * 1024

def parse_watts(val):
    if not val.endswith(" W"):
        raise AssertionError(val)
    return float(val[0:-2])

def gpu_val_key(index, name):
    return "sys/gpu%s/%s" % (index, name)

###################################################################
# Print
###################################################################

def print_kv(vals):
    json.dump({"kv": vals}, sys.stdout)
    print_eof()

def print_eof():
    sys.stdout.write("\n\n")
    sys.stdout.flush()

###################################################################
# Main
###################################################################

def main():
    init()
    while sys.stdin.readline():
        print_gpu_stats()
        print_eof()

main()
