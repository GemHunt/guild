#!/usr/bin/env python

# Copyright 2016 TensorHub, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import division

import json
import os
import subprocess
import sys
import time

try:
    import psutil
except ImportError:
    sys.stderr.write(
        "WARNING: psutil not installed, cannot collect op stats "
        "(see https://github.com/giampaolo/psutil)\n")
    sys.exit(127)

cpu_percent_init = False

###################################################################
# Op (pid) stats
###################################################################

def print_pid_stats(proc):
    print_kv(pid_stats(proc))

def pid_stats(proc):
    global cpu_percent_init
    try:
        mem = proc.memory_info()
        cpu = proc.cpu_percent()
    except psutil.NoSuchProcess:
        sys.exit(0)
    stats = {
        "op/mem/rss": mem.rss,
        "op/mem/vms": mem.vms
    }
    if cpu_percent_init:
        stats["op/cpu/util"] = cpu / 100
    cpu_percent_init = True
    return stats

###################################################################
# Print
###################################################################

def print_kv(vals):
    json.dump({"kv": vals}, sys.stdout)
    print_eof()

def print_eof():
    sys.stdout.write("\n\n")
    sys.stdout.flush()

###################################################################
# Main
###################################################################

def main():
    proc = init_proc()
    while sys.stdin.readline():
        print_pid_stats(proc)
        print_eof()

def init_proc():
    pid = os.getenv("OP_PID")
    if not pid:
        sys.stderr.write("ERROR: OP_PID env not set\n")
        sys.exit(1)
    try:
        return psutil.Process(int(pid))
    except psutil.NoSuchProcess:
        sys.exit(0)

main()
