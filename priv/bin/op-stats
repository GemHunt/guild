#!/usr/bin/env python

from __future__ import division

import json
import os
import subprocess
import sys
import time

PID = None

last_times = None

###################################################################
# Init
###################################################################

def init():
    init_pid()
    init_pagesize()
    init_clk_tck()

def init_pid():
    global PID
    PID = os.getenv("OP_PID")
    if not PID:
        raise AssertionError("OP_PID env not set")

def init_pagesize():
    global PAGESIZE
    PAGESIZE = int(subprocess.check_output(["/usr/bin/getconf", "PAGESIZE"]))

def init_clk_tck():
    global CLK_TCK
    CLK_TCK = int(subprocess.check_output(["/usr/bin/getconf", "CLK_TCK"]))

###################################################################
# Op (pid) stats
###################################################################

def print_stats(uptime):
    print_kv(pid_stats(uptime))

def print_eof():
    sys.stdout.write("\n\n")
    sys.stdout.flush()

def pid_stats(uptime):
    stats = {}
    raw = read_raw_pid_stats()
    if raw:
        stats.update(mem_stats(raw))
        stats.update(cpu_stats(raw, uptime))
    return stats

def read_raw_pid_stats():
    try:
        f = open("/proc/%s/stat" % PID, "r")
    except IOError:
        return None
    else:
        return f.read().split()

def mem_stats(raw):
    return [
        ("op/mem/vsz", int(raw[22])),
        ("op/mem/rss",   int(raw[23]) * PAGESIZE)
    ]

def cpu_stats(raw, uptime):
    global last_times
    cur_times = uptime, cpu_time(raw)
    if last_times:
        stats = [
            ("op/cpu/util", cpu_util(cur_times, last_times))
        ]
    else:
        stats = []
    last_times = cur_times
    return stats

def cpu_time(raw):
    utime = int(raw[13])
    stime = int(raw[14])
    cutime = int(raw[15])
    cstime = int(raw[16])
    return (utime + stime + cutime + cstime) / CLK_TCK

def cpu_util(times1, times0):
    uptime1, cpu1 = times1
    uptime0, cpu0 = times0
    return (cpu1 - cpu0) / (uptime1 - uptime0)

###################################################################
# Print
###################################################################

def print_kv(vals):
    json.dump({"kv": vals}, sys.stdout)
    print_eof()

def print_eof():
    sys.stdout.write("\n\n")
    sys.stdout.flush()

###################################################################
# Main
###################################################################

def main():
    init()
    while sys.stdin.readline():
        uptime = read_uptime()
        print_stats(uptime)
        print_eof()

def read_uptime():
    return float(open("/proc/uptime", "r").read().split()[0])

main()
